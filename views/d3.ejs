<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <title>Document</title>
</head>
<body>

<div>
    <svg id="sample" width="2000" height="1000"
         style="background: white; border: .3em solid #ccc;">
    </svg>
</div>

<script src="/socket.io/socket.io.js"></script>
<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script>

<script>

    function lineGraph(options){
        this.w = options.target.attr('width');
        this.h = options.target.attr('height');
        this.svg = options.target
                .attr('width', this.w)
                .attr('height', this.h)
                .style('display', 'block');
        this.polyline = this.svg.append('path')
                .attr('stroke', options.line.color)
                .attr('stroke-width', options.line.stroke_width)
                .attr('fill', 'transparent');
        this.values = [];
        this.line = [];
        this.interpolate = options.interpolate;
        this.circle = {
            color: options.circle.color
        };
        this.duration = options.duration;
    }

    lineGraph.prototype = {
        _addCircles: function(){
            var circles = this.svg.selectAll('circle')
                    .data(this.values);

            circles.enter()
                    .append('circle')
                    .attr('cx', this.line.x())
                    .attr('cy', 0)
                    .attr('r', 0);

            circles.exit()
                    .transition()
                    .duration(this.duration)
                    .attr('cy', 0).attr('r', 0)
                    .remove();

            circles
                    .attr('fill', this.circle.color)
                    .transition()
                    .duration(this.duration)
                    .attr('cx', this.line.x())
                    .attr('cy', this.line.y())
                    .attr('r', 6);
        },

        _addLine: function(){
            var n = this.values.length;
            this.line = d3.svg.line()
                    .x(function(d, i){
                        return (i + 1) * 2000 / (n + 1);
                    })
                    .y(function(d, i) {
                        return d * 50 + 10;
                    })
                    .interpolate(this.interpolate);

            this.polyline
                    .transition()
                    .duration(this.duration)
                    .attr('d', this.line(this.values));
        },

        update: function(data){
            this.values.push(data);
            this._addLine();
            this._addCircles();
        }
    };

    var lg = new lineGraph({
        target: d3.select("svg#sample"),
        line: {
            color: 'blue',
            stroke_width: 3
        },
        duration: 500,
        circle: {
            color: 'blue'
        },

        interpolate: 'cardinal'
    });

    var socket = io.connect();
    socket.on('count', function(data) {
        lg.update(data);
    });

</script>
</body>
</html>